#pragma once

namespace tamias {
  namespace wtf {
    namespace xml {
      namespace hidden {
        class Symbol;
        class Reader;
      }
      class Parser;
    }
  }
}

#include "../basic/string.h"
#include "../basic/types.h"
//#include "../data/pair.h"
//#include "../data/stack.h"
//#include "../wtf/xml_element.h"
//#include "../wtf/xml_tag.h"

class tamias::wtf::xml::hidden::Symbol {
  public:
    enum Type {
      TYPE_NONE, TYPE_ERROR, TYPE_NORMAL, TYPE_FORCED
      // TYPE_FORCED means that symbol is forced not to be key, likely generated by &entity;
    };

    Symbol( Type type, chartype value );
    Symbol( Symbol const &symbol );
    Symbol& operator = ( Symbol const & symbol );
    ~Symbol();

    Type type() const;
    chartype value() const;

  private:
    Type mType;
    chartype mValue;
};

class tamias::wtf::xml::hidden::Reader {
  public:
    Reader();
    ~Reader();

    Symbol add( chartype ch );
    void reset();

    static bool isAlpha( chartype ch );

  private:
    Reader( Reader const &reader );
    Reader& operator = ( Reader const &reader );

    enum {
      STATE_DEFAULT, STATE_ENTITY, STATE_ERROR
    } mState;
    String mEntity;

    Symbol entity();
};

class tamias::wtf::xml::Parser {
  public:
    enum ParserEvent {
      EVENT_NONE, EVENT_ERROR, EVENT_ELEMENT
    };

    Parser();
    ~Parser();

    ParserEvent append( String const &data );
    Element element();

  private:
    Parser( Parser const &parser );
    Parser& operator = ( Parser const &parser );

    enum StreamState {
      STATE_DEFAULT, STATE_ERROR, STATE_COMMENT1, STATE_COMMENT2, STATE_COMMENT3
    };

    hidden::Reader mReader;
    Stack <Pair<Element, sizetype> > mStack;

    Stream
};

